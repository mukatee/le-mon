<project name="le-mon" default="cleandist" basedir=".">
  <property environment="env"/>
  <property name="prod-src" value="src"/>
  <property name="test-src" value="test"/>
  <property name="main-output" value="ant-out"/>
  <property name="javadoc-dir" value="${main-output}/docs/api"/>
  <property name="prod-dest" value="${main-output}/production"/>
  <property name="test-dest" value="${main-output}/testing"/>
  <property name="test-report" value="junit-report"/>
  <property name="meta-dir" value="meta"/>

  <property name="main-distro-dir" value="distro"/>
  <property name="server-distro-dir" value="${main-distro-dir}/server"/>
  <property name="sshprobe-distro-dir" value="${main-distro-dir}/sshprobe"/>
  <property name="httpprobe-distro-dir" value="${main-distro-dir}/httpprobe"/>

  <property name="version" value="v0.1"/>
  <property name="jar.file" value="le-mon-${version}.jar"/>
  <property name="zip.file" value="le-mon-${version}.zip"/>

  <path id="class.path">
    <!--pathelement path="${currentenv.classpath}"/-->
    <fileset dir="lib">
      <include name="**/*.jar"/>
    </fileset>
    <path location="${prod-dest}"/>
  </path>

  <!-- CLEAN -->
  <target name="clean">
    <echo message="Removing old directory structure..."/>
    <delete dir="${main-output}"/>
    <delete dir="${main-distro-dir}"/>
  </target>

  <!-- MK DEPLOY DIR -->
  <target name="init">
    <mkdir dir="${prod-dest}"/>
    <mkdir dir="${test-dest}"/>
    <mkdir dir="${test-report}"/>
  </target>

  <target name="compile" depends="init">
    <echo message="Compiling prod..."/>
    <javac source="8" target="8" debug="true" classpathref="class.path" srcdir="${prod-src}" destdir="${prod-dest}"/>
    <echo message="Compiling tests..."/>
    <javac source="8" target="8" classpathref="class.path" srcdir="${test-src}" destdir="${test-dest}"/>
  </target>

  <!-- CLEANDIST-->
  <target name="cleandist" depends="clean, init, compile, copyresources, build.jar, javadocs, create.distro">
  </target>

  <target name="copyresources" depends="init,compile">
    <copy todir="${prod-dest}">
      <fileset dir="${prod-src}">
        <include name="**/*.html"/>
        <include name="**/*.css"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
    <copy todir="${test-dest}">
      <fileset dir="${test-src}">
        <include name="**/*.txt"/>
        <include name="**/*.xml"/>
      </fileset>
    </copy>
  </target>

  <target name="test" depends="cleandist">

    <junit printsummary="yes" haltonfailure="no">
      <classpath>
        <pathelement location="${prod-dest}"/>
        <pathelement location="${test-dest}"/>
        <path refid="class.path"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest fork="once" todir="${test-report}">
        <fileset dir="${test-src}">
          <include name="**/*Tests.java"/>
          <exclude name="**/*Interface*.java"/>
          <exclude name="**/TestObject.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="build.jar" depends="compile, copyresources" description="creates the jar file with all the code">
    <jar destfile="${jar.file}">
      <fileset dir="${prod-dest}"/>
    </jar>
  </target>

  <target name="create.distro" depends="compile" description="creates the jar file with all the code">
    <mkdir dir="${main-distro-dir}"/>
    <mkdir dir="${server-distro-dir}"/>
    <mkdir dir="${sshprobe-distro-dir}"/>
    <mkdir dir="${httpprobe-distro-dir}"/>

    <copy file="${meta-dir}/sshprobe.properties" tofile="${sshprobe-distro-dir}/le-mon.properties"/>
    <copy file="${meta-dir}/start-sshprobe.bat" todir="${sshprobe-distro-dir}"/>
    <copy file="${jar.file}" todir="${sshprobe-distro-dir}"/>

    <copy file="${meta-dir}/httpprobe.properties" tofile="${httpprobe-distro-dir}/le-mon.properties"/>
    <copy file="${meta-dir}/start-httpprobe.bat" todir="${httpprobe-distro-dir}"/>
    <copy file="${jar.file}" todir="${httpprobe-distro-dir}"/>

    <copy file="${meta-dir}/server.properties" tofile="${server-distro-dir}/le-mon.properties"/>
    <copy file="${meta-dir}/start-server.bat" todir="${server-distro-dir}"/>
    <copy file="${jar.file}" todir="${server-distro-dir}"/>
  </target>

  <target name="javadocs">
    <javadoc destdir="${javadoc-dir}" author="true" version="true" use="true" windowtitle="le-mon API">
      <packageset dir="${prod-src}" defaultexcludes="yes">
        <include name="fi/vtt/lemon/**"/>
        <exclude name="fi/vtt/lemon/server/webui/**"/>
      </packageset>
    </javadoc>
  </target>

  <target name="build.zip" depends="cleandist,javadocs" description="creates the zip file with source code, java docs, libs, jar, configurations">
    <zip destfile="${zip.file}">
      <zipfileset file="le-mon-license.txt"/>
      <zipfileset dir="doc" includes="*.pdf" prefix="docs"/>
      <zipfileset dir="doc" includes="*.txt" prefix="docs"/>
      <!--zipfileset dir="lib" prefix="lib"/-->
      <zipfileset dir="${javadoc-dir}/" prefix="docs/api"/>
      <zipfileset dir="${prod-src}/" prefix="src/prod"/>
      <zipfileset dir="${test-src}/" prefix="src/test"/>
      <zipfileset dir="${main-distro-dir}/" prefix="bin"/>
      <zipfileset dir="." includes="${jar.file}"/>
    </zip>
  </target>

</project>